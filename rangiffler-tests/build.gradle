buildscript {
    ext {
        slf4jVersion = '2.0.12'
        logbackVersion = '1.4.11'
        junitVersion = '5.10.2'
        retrofitVersion = '2.11.0'
        okhttp3Version = '3.14.9'
        springJdbcVersion = '6.1.5'
        p6spyVersion = '3.9.1'
        hibernateVersion = '6.4.4.Final'
        springCryptoVersion = '6.2.3'
        allureVersion = '2.26.0'
        selenideVersion = '7.2.3'
        kafkaClientsVersion = '3.7.0'
        javaFakerVersion = '1.0.2'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group = 'guru.qa'
version = '0.0.1'

repositories {
    mavenCentral()
}

allure {
    version = allureVersion
    adapter {
        allureJavaVersion = allureVersion
        aspectjVersion = "1.9.21"
        autoconfigure = true
        aspectjWeaver = true
    }
}

dependencies {
    // Logs
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    // JUnit
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    // REST
    testImplementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    testImplementation "com.squareup.retrofit2:converter-jackson:${retrofitVersion}"
    testImplementation "com.squareup.okhttp3:logging-interceptor:${okhttp3Version}"
    testImplementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttp3Version}"
    // DB
    testImplementation "org.springframework:spring-jdbc:${springJdbcVersion}"
    testImplementation "com.mysql:mysql-connector-j:${project.ext.mysqlConnectorVersion}"
    testImplementation "p6spy:p6spy:${p6spyVersion}"
    testImplementation "org.hibernate:hibernate-core:${hibernateVersion}"
    testImplementation "org.springframework.security:spring-security-crypto:${springCryptoVersion}"
    // Allure
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter-api"
        exclude group: "org.junit.platform"
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation("io.qameta.allure:allure-okhttp3:${allureVersion}") {
        exclude group: "io.qameta.allure", module: "allure-attachments"
        exclude group: "com.squareup.okhttp3"
    }
    testImplementation("io.qameta.allure:allure-grpc:${allureVersion}") {
        exclude group: "io.qameta.allure", module: "allure-attachments"
    }
    // WEB
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    // gRPC
    testImplementation project(':rangiffler-grpc-common')
    testImplementation "io.grpc:grpc-protobuf:${project.ext.grpcVersion}"
    testImplementation "io.grpc:grpc-stub:${project.ext.grpcVersion}"
    testImplementation "io.grpc:grpc-netty:${project.ext.grpcVersion}"
    testImplementation "com.google.protobuf:protobuf-java:${project.ext.protobufVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${project.ext.protobufVersion}"
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0
    // Kafka
    testImplementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"
    // Faker
    testImplementation "com.github.javafaker:javafaker:${javaFakerVersion}"
    // Lombok
    testAnnotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}